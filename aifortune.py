# -*- coding: utf-8 -*-
"""AI算命師系統.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jzcMrjjm6ZB8ApJ_heStpaa3sPIWFV2L

**AI算命師系統**  
說明: RAG + Groq 卦象問答系統 加上「隨機起卦」功能，讓使用者只輸入一個問題，系統會:

1. 隨機產生卦象（6 個爻，每個爻可能變動）

2. 找出卦象與動爻

3. 整合進 prompt → 丟給模型生成回答

**起卦方式（隨機法）說明**  

每一爻會是以下四種之一（銅錢法轉換）：

6：陰爻變（⚋ → ⚊）

7：陽爻不變（⚊）

8：陰爻不變（⚋）

9：陽爻變（⚊ → ⚋）

**可自行下載資料檔**
"""

!wget -O yijing_data.jsonl "https://drive.google.com/file/d/1wXqcyUDpkgk9ycdJFwV9bOMki9NEutyI/view?usp=sharing"

"""**載入必要套件**"""

!pip install gradio

!pip install faiss-cpu
!pip install sentence-transformers
!pip install openai

import random
import json
import faiss
import numpy as np
import requests
import gradio as gr
from sentence_transformers import SentenceTransformer

"""**初始化模型與資料**"""

GROQ_API_KEY = "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"
data_path = "/content/yijing_training_data_3000.jsonl"

"""**載入 JSONL 資料**"""

sample_data = []
with open(data_path, 'r', encoding='utf-8') as f:
    for line in f:
        item = json.loads(line)
        if "prompt" in item and "completion" in item:
            sample_data.append(item)

corpus = [item["prompt"] for item in sample_data]

"""**嵌入模型與向量資料庫**"""

embed_model = SentenceTransformer("all-MiniLM-L6-v2")
embeddings = embed_model.encode(corpus, convert_to_numpy=True)
dimension = embeddings.shape[1]
index = faiss.IndexFlatL2(dimension)
index.add(embeddings)

"""**隨機起掛**"""

yao_map = {
    6: "陰爻變",
    7: "陽爻不變",
    8: "陰爻不變",
    9: "陽爻變"
}

def random_hexagram():
    yaos = [random.choice([6, 7, 8, 9]) for _ in range(6)]
    yao_desc = [yao_map[y] for y in yaos]
    return yaos, yao_desc

"""**查詢語料庫**"""

def retrieve_context(query, top_k=3):
    query_embedding = embed_model.encode([query], convert_to_numpy=True)
    D, I = index.search(query_embedding, top_k)
    return "\n\n".join([sample_data[i]["completion"] for i in I[0]])

"""**呼叫 Groq**"""

def ask_llm(query, context):
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "llama3-8b-8192",
        "messages": [
            {
                "role": "system",
                "content": "你全程只會使用中文回答，且你是一位擅長解釋易經卦象的智慧顧問，根據卦象與使用者問題，給出有深度的建議。"
            },
            {
                "role": "user",
                "content": f"背景資料如下：\n{context}\n\n使用者提問：{query}"
            }
        ],
        "temperature": 0.7,
        "max_tokens": 512
    }

    response = requests.post("https://api.groq.com/openai/v1/chat/completions",
                             headers=headers, json=payload)
    try:
        return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        return f"⚠️ 發生錯誤：{response.text}"

"""**主邏輯**"""

def fortune_teller(user_question):
    yaos, yao_desc = random_hexagram()
    moving_lines = [i+1 for i, y in enumerate(yaos) if y in [6, 9]]
    yao_text = f"動爻：{', '.join(map(str, moving_lines)) if moving_lines else '無'}\n六爻狀態：{', '.join(yao_desc)}"

    # 組合 Prompt（模擬使用者原本手動提供卦象）
    pseudo_prompt = f"問題：{user_question}\n卦象：隨機卦象，{yao_text}。\n"

    # 做 RAG
    context = retrieve_context(pseudo_prompt)
    answer = ask_llm(pseudo_prompt, context)

    return f"🔮 您的問題：{user_question}\n\n🧧 您抽到的卦象描述：\n{yao_text}\n\n💡 解卦建議：\n{answer}"

"""**Gradio UI**"""

gr.Interface(
    fn=fortune_teller,
    inputs=gr.Textbox(lines=2, label="請輸入您的問題", placeholder="例如：我最近適合換工作嗎？"),
    outputs=gr.Textbox(label="卦象解釋結果"),
    title="隨機卦象問答系統 🔮",
    description="輸入你的問題，AI算命師會自動幫你起卦並解析卦象。"
).launch(share=True)